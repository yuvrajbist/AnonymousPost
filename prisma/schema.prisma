// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(auto()) @map("_id") @db.ObjectId
  name                      String?
  bio                       String?
  email                     String?   @unique
  image                     String?
  coverImage                String?
  profileImage              String?
  hashedPassword            String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  followingIds              String[]  @db.ObjectId
  hasNotification           Boolean?
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  isVerified                Boolean?

  posts         Post[]
  comments      Comment[]
  notifications Notification[]
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  body        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  likedIds    String[] @db.ObjectId
  image       String?
  isAnonymous Boolean?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  isAnonymous Boolean?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
